from abc import ABC, abstractmethod
import pygame

class Jogo:
    def __init__(self, id_game, status):
        self.id_game = id_game
        self.status= status

class Background(Jogo):
    def __init__(self, id_game, amount_honey, status, id_background, name_background):
        super().__init__(id_game, status)
        self.name_background = name_background
        self.amount_honey= amount_honey
        self.id_background = id_background

class Plataforma(Background):
    def __init__(self, id_game, amount_honey, status,id_background, id_plataforma, name_background, posx_plataforma, posy_plataforma, largura, altura):
        super().__init__(id_game, amount_honey, status, id_background, name_background)
        self.id_plataforma =  id_plataforma
        self.posx_plataforma =  posx_plataforma
        self.posy_plataforma = posy_plataforma
        self.largura = largura
        self.altura = altura

class Honey(Background):
    def __init__(self, id_game, amount_honey, status, id_background, name_background, posx_honey, posy_honey, id_honey):
        super().__init__(id_game, amount_honey, status, id_background, name_background)
        self.id_honey = id_honey
        self.posx_honey= posx_honey
        self.posy_honey= posy_honey
    


class Personagens(Jogo):
    def __init__(self, id_game, status, id_character, sprite,  name_character, pos_x, pos_y, animation, vida):
        super().__init__(id_game, status)
        self.id_character= id_character
        self.sprite= sprite
        self.name_character= name_character
        self.pos_x = pos_x
        self.pos_y= pos_y
        self.animation = animation
        self.vida = vida


    @abstractmethod
    def fazer_animacao(self, tipo):
        pass

    @abstractmethod
    def verifica_colisao(self, outro_px, outro_py):
        pass

    @abstractmethod
    def movimento(self):
        pass

class Npc(Personagens):
    def __init__(self, id_game, name_character, status, id_character, sprite, pos_x, pos_y, animation, text_box, hitbox_px_npc, hitbox_py_npc, vida):
        super().__init__(id_game, status, id_character, sprite,  name_character, pos_x, pos_y, animation, vida)
        self.text_box=text_box
        self.hitbox_px_npc=hitbox_px_npc
        self.hitbox_py_npc=hitbox_py_npc

    def movimento(self):
        return 
    
    def fazer_animacao(self, tipo):
        if tipo == "idle":
            #terminar



    def verifica_colisao(self, outro_px, outro_py):
        if outro_px == self.hitbox_px_npc and outro_py == self.hitbox_py_npc:
            return True        
    
class Player(Personagens, ABC):
    def __init__ (self, id_game, amount_honey_coletada, name_character, status, id_character, sprite, pos_x, pos_y, animation, text_box, hitbox_px_player, hitbox_py_player, vida, speed):
        super().__init__(id_game, status, id_character, sprite, name_character, pos_x, pos_y, animation, vida)
        self.hitbox_px_player =hitbox_px_player
        self.hitbox_py_player= hitbox_py_player
        self.amount_honey_coletada= amount_honey_coletada
        self.speed = speed
        self.text_box= text_box

    def movimento(self):
        tecla = pygame.key.get_pressed()
        if tecla[pygame.K_LEFT]:
            self.pos_x -= self.speed
        if tecla[pygame.K_RIGHT]:
            self.pos_x += self.speed
        if tecla[pygame.K_UP]:
            self.pos_y -= self.speed
        if tecla[pygame.K_DOWN]:
            self.pos_y += self.speed


    def fazer_animacao(self, tipo):
        #terminar
        pass

    def ataque(self, outro):
         if self.name_character == "POOH":
            dano_ataque=3
            outro.vida = outro.vida-dano_ataque

    
class Inimigo(Personagens):
    def __init__(self, id_game, name_character, status, id_character, sprite, pos_x, pos_y, animation, text_box, hitbox_px_enemy, hitbox_py_enemy, vida, speed, moveset):
        super().__init__(id_game, status, id_character, sprite,  name_character, pos_x, pos_y, animation, vida)
        self.text_box= text_box
        self.hitbox_px_enemy=hitbox_px_enemy
        self.hitbox_py_enemy=hitbox_py_enemy
        self.speed= speed
        self.moveset = moveset

    def ataque(self, outro):
        if self.name_character == 'ABELHA':
            dano_ataque = 1
            outro.vida = outro.vida - dano_ataque
            

    def verifica_colisao(self, outro):
        if self.rect.colliderect(outro.sprite.rect) :
            return ataque(self, outro)

def main():
    pygame.init()
    screen = pygame.display.set_mode((1920, 1080))
    clock = pygame.time.Clock()
    running = True
    pooh_idle_sprites = [
    #endere√ßo para as sprites em idle do pooh
    ]
    npc_idle_sprites= [
    #endereco para as sprites em idle do npc
    ]


    while running:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                running = False
        screen.fill((0, 0, 0))
        pygame.display.flip()
        clock.tick(60)
    pygame.quit()

if "__main__" == __name__:
    main()
